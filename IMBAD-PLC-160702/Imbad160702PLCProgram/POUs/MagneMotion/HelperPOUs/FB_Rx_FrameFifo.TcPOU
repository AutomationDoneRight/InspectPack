<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_Rx_FrameFifo" Id="{3421c8c4-ada5-480a-a1bf-06768dd8b853}" SpecialFunc="None">
    <Declaration><![CDATA[(* Tx/Rx (string data) fifo control function block *)
FUNCTION_BLOCK FB_Rx_FrameFifo
VAR_INPUT
	bLog		: BOOL		:= FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix		: STRING	:= 'Unknown::';(* Log message description string (allows the identification of log message source) *)
	stPut		: ST_MM_RxFrame;(* Frame to add (write) to the fifo *)
END_VAR
VAR_OUTPUT
	bOk			: BOOL; 	(* TRUE = New entry added or removed succesfully, FALSE = Fifo overflow or fifo empty *)
	stGet		: ST_MM_RxFrame;(* Frame removed (read) from fifo *)
	nCount		: UDINT		:= 0;(* Number of fifo entries *)
	cbFree		: UDINT 	:= 0;(* Free buffer space *)
END_VAR
VAR
	fbBuffer 	: FB_MemRingBuffer;(* Basic (lower level) buffer control function block *)
	buffer		: ARRAY[-3..MM_CONST.PLCPRJ_BUFFER_SIZE] OF BYTE;(* Internal buffer memory *)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Action Name="AddTail" Id="{4d0bfb4d-5fbe-494c-9f45-c1cb78ad36e7}">
      <Implementation>
        <ST><![CDATA[(* Adds new fifo entry *)
fbBuffer.A_AddTail( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
					pWrite := ADR( stPut ), cbWrite := SIZEOF( stPut ), 
					bOk=>bOk, nCount=>nCount );
IF bOk THEN
	cbFree := MM_CONST.PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
	IF bLog THEN(* Log message *)
		F_ADSLOGHEXDATA( CONCAT( sPrefix, '<=' ), ADR( stPut ), SIZEOF( stPut ) );
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Clear" Id="{25207a77-1812-4902-814b-7542d35271b9}">
      <Implementation>
        <ST><![CDATA[(* Resets fifo = clears all data *)
MEMSET( ADR( stGet ), 0, SIZEOF( stGet ) );
fbBuffer.A_Reset( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
					pWrite := ADR( stPut ), cbWrite := SIZEOF( stPut ), 
					pRead := ADR( stGet ), cbRead := SIZEOF( stPut ),
					bOk=>bOk, nCount=>nCount );
cbFree := MM_CONST.PLCPRJ_BUFFER_SIZE;(* Free buffer size *)]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoveHead" Id="{5fe5d2cf-96eb-4d70-a54b-a20820861f65}">
      <Implementation>
        <ST><![CDATA[(* Removes oldest fifo entry *)
MEMSET( ADR( stGet ), 0, SIZEOF( stGet ) );
fbBuffer.A_RemoveHead( pBuffer:= ADR(buffer), cbBuffer:= SIZEOF(buffer),
						pRead := ADR( stGet ), cbRead := SIZEOF( stGet ),
						bOk=>bOk, nCount=>nCount );
IF bOk THEN
	cbFree := MM_CONST.PLCPRJ_BUFFER_SIZE - fbBuffer.cbSize;(* Calculate the free buffer space *)
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_Rx_FrameFifo">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Rx_FrameFifo.AddTail">
      <LineId Id="2" Count="8" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Rx_FrameFifo.Clear">
      <LineId Id="2" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Rx_FrameFifo.RemoveHead">
      <LineId Id="2" Count="6" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>