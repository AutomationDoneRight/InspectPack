<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="P_TextModeWriteLot" Id="{42dbbd6e-ef22-4a62-9fdf-213c53a000f7}" SpecialFunc="None">
    <Declaration><![CDATA[(* Writing of CSV file in text mode. None of the field value is containing any non-printing control characters like line feed, carriage return, quotation marks, semicolon... *)
PROGRAM P_TextModeWriteLot
VAR
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileName		: T_MaxString := 'C:\LotData.csv';(* CSV destination file path and name *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)
	VUT				: BYTE;
	MAX_FIELDS      : BYTE := 15;	

	(*
	
	database		: ARRAY[0..CONFIG.MAX_CSV_ROWS, 0..CONFIG.MAX_CSV_COLUMNS ] OF STRING(CONFIG.MAX_CSV_FIELD_LENGTH) :=[ (* Source PLC database *)
	'0_0', '0_1', '0_2', '0_3', '0_4', '0_5',
	'1_0', '1_1', '1_2', '1_3', '1_4', '1_5',
	'2_0', '2_1', '2_2', '2_3', '2_4', '2_5',
	'3_0', '3_1', '3_2', '3_3', '3_4', '3_5',
	'4_0', '4_1', '4_2', '4_3', '4_4', '4_5',
	'5_0', '5_1', '5_2', '5_3', '5_4', '5_5'];
   *)
	TotalStainArea: REAL := 0;
	TotalStainCount: REAL := 0;
	byCounter : BYTE := 0;
	TotalGood : DINT :=0;
	TotalBad : DINT := 0;
	TotalPremium : DINT :=0;
	cavitycounter: BYTE;
END_VAR

 
]]></Declaration>
    <Implementation>
      <ST><![CDATA[DEFAULT_CSV_FIELD_SEP := 16#2C;(* Comma ASCII code *)
CASE step OF
	0:	(* Wait for rising edge at bWrite variable *)
		IF bWrite THEN
			bWrite 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			step 	:= 1;
		END_IF

	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := sNetId, sPathName := sFileName, nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;

	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF

	3:(* Convert one PLC record to CSV format *)
	    TotalGood := 0;
		TotalBad := 0;
		TotalPremium := 0;
		FOR byCounter := 1 TO CONFIG.MAX_CAVITY BY 1 DO
			TotalGood := TotalGood + LotsData.Lot.CavityCounts[byCounter].GoodCount;
			TotalBad := TotalBad + LotsData.Lot.CavityCounts[byCounter].BadCount;
			TotalPremium := TotalPremium + LotsData.Lot.CavityCounts[byCounter].GoodCount;
	    END_FOR	
        sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= CONFIG.MAX_CSV_ROWS THEN
			FOR nColumn:= 1 TO MAX_FIELDS BY 1 DO
				CASE nColumn OF 
					1: sCSVField := CONCAT( LotsData.Lot.PartNumber,',');  // Part Number
					2: sCSVField := CONCAT( LotsData.Lot.LotNumber,',');  //  Lot Number
					3: sCSVField := CONCAT( LotsData.Lot.JobNumber,','); 
					4: sCSVField := CONCAT( LotsData.Lot.LotDate,',');
					5: sCSVField := CONCAT( LotsData.Lot.PistonLotNumber,','); 
					6: sCSVField := CONCAT( LotsData.Lot.PistonPartNumber,','); 
					7: sCSVField := CONCAT( LotsData.Lot.CapLotNumber,','); 
					8: sCSVField := CONCAT( LotsData.Lot.CapPartNumber,','); 
					9: sCSVField := CONCAT( LotsData.Lot.RawMaterialLotNumber,','); 
					10: sCSVField := CONCAT( LotsData.Lot.BlackConPartNumber,','); 
					11: sCSVField := CONCAT( LotsData.Lot.Comment,','); 					
					12: CASE  LotsData.Lot.BarrelSize OF                                     // Barrel Type
						   	eBarrelType.Size55cc: sCSVField := CONCAT('55cc',',');
						   	eBarrelType.Size30cc: sCSVField := CONCAT('30cc',',');
	 						eBarrelType.Size10cc: sCSVField := CONCAT('10cc',',');
	 						eBarrelType.Size5cc:  sCSVField := CONCAT('5cc',',');
	 						eBarrelType.Size3cc:  sCSVField := CONCAT('3cc',',');
					   END_CASE
					13: sCSVField := CONCAT( DINT_TO_STRING(TotalPremium),','); 
					14: sCSVField := CONCAT( DINT_TO_STRING(TotalGood),','); 
					15: sCSVField := CONCAT( DINT_TO_STRING(TotalBad),','); 
							
					ELSE;
				END_CASE			
			    (* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = MAX_FIELDS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF		
			END_FOR
					
			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;

	5:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 10;(* We don't have a next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF

	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		sCSVLine := '';
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
			// reset all the Lot related information
			FOR cavitycounter:=1 TO CONFIG.MAX_CAVITY BY 1 DO
				LotsData.Lot.CavityCounts[cavitycounter].BadCount :=0;	
				LotsData.Lot.CavityCounts[cavitycounter].GoodCount :=0;	
				LotsData.Lot.CavityCounts[cavitycounter].PremiumCount :=0;	
				LotsData.Lot.CavityCounts[cavitycounter].TotalCount :=0;	
			END_FOR
			LotsData.Lot.LotNumber := 'START NEW LOT';
			LotsData.Lot.JobNumber := '';
			LotsData.Lot.PartNumber := '';				
		END_IF

END_CASE



]]></ST>
    </Implementation>
    <Property Name="VehicleID" Id="{44f8d991-4e10-4184-a093-6b49ba48fae4}">
      <Declaration><![CDATA[PROPERTY PUBLIC VehicleID : BYTE]]></Declaration>
      <Set Name="Set" Id="{b9ffd27d-3aa3-4c50-aa9e-3ee8879d6fa3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[VUT := VehicleID;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="WriteData" Id="{e0d20bac-192a-41a2-802d-a03a5cccc636}">
      <Declaration><![CDATA[PROPERTY PUBLIC WriteData : BOOL]]></Declaration>
      <Set Name="Set" Id="{9baace6a-c38e-4b5a-bc93-10010a521b13}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWrite := WriteData;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="P_TextModeWriteLot">
      <LineId Id="133" Count="0" />
      <LineId Id="3" Count="28" />
      <LineId Id="424" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="419" Count="0" />
      <LineId Id="427" Count="1" />
      <LineId Id="420" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="206" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="343" Count="1" />
      <LineId Id="346" Count="6" />
      <LineId Id="216" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="243" Count="3" />
      <LineId Id="242" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="429" Count="1" />
      <LineId Id="399" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="260" Count="7" />
      <LineId Id="208" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="52" Count="30" />
      <LineId Id="472" Count="0" />
      <LineId Id="83" Count="14" />
      <LineId Id="514" Count="0" />
      <LineId Id="517" Count="5" />
      <LineId Id="524" Count="2" />
      <LineId Id="98" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_TextModeWriteLot.VehicleID.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_TextModeWriteLot.WriteData.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>