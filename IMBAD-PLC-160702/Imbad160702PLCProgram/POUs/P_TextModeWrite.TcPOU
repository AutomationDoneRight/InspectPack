<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="P_TextModeWrite" Id="{fb25ce16-634e-49ae-8973-412dcfc474bb}" SpecialFunc="None">
    <Declaration><![CDATA[(* Writing of CSV file in text mode. None of the field value is containing any non-printing control characters like line feed, carriage return, quotation marks, semicolon... *)
PROGRAM P_TextModeWrite
VAR
	bWrite			: BOOL := FALSE;(* Rising edge starts program execution *)
	sNetId			: T_AmsNetId := '';	(* TwinCAT system network address *)
	sFileName		: T_MaxString := 'C:\PartsData3.csv';(* CSV destination file path and name *)
	sCSVLine		: T_MaxString := '';(* Single CSV text line (row, record), we are using string as record buffer (your are able to see created fields) *)
	sCSVField		: T_MaxString := '';(* Single CSV field value (column, record field) *)
	bBusy			: BOOL;
	bError			: BOOL;
	nErrId			: UDINT;
	nRow	 		: UDINT 	:= 0;(* Row number (record) *)
	nColumn			: UDINT 	:= 0;(* Column number (record field) *)
	hFile			: UINT		:= 0;(* File handle of the source file *)
	step			: DWORD 	:= 0;
	fbFileOpen		: FB_FileOpen;(* Opens file *)
	fbFileClose		: FB_FileClose;(* Closes file *)
	fbFilePuts		: FB_FilePuts;(* Writes one record (line) *)
	fbWriter		: FB_CSVMemBufferWriter;(* Helper function block used to create CSV data bytes (single record line) *)
	VUT				: BYTE;
	MAX_FIELDS      : BYTE := 22;	

	(*
	
	database		: ARRAY[0..CONFIG.MAX_CSV_ROWS, 0..CONFIG.MAX_CSV_COLUMNS ] OF STRING(CONFIG.MAX_CSV_FIELD_LENGTH) :=[ (* Source PLC database *)
	'0_0', '0_1', '0_2', '0_3', '0_4', '0_5',
	'1_0', '1_1', '1_2', '1_3', '1_4', '1_5',
	'2_0', '2_1', '2_2', '2_3', '2_4', '2_5',
	'3_0', '3_1', '3_2', '3_3', '3_4', '3_5',
	'4_0', '4_1', '4_2', '4_3', '4_4', '4_5',
	'5_0', '5_1', '5_2', '5_3', '5_4', '5_5'];
	
   *)
	//TotalStainArea: REAL := 0;
	TotalStainCount: REAL := 0;
END_VAR

 
]]></Declaration>
    <Implementation>
      <ST><![CDATA[DEFAULT_CSV_FIELD_SEP := 16#2C;(* Comma ASCII code *)
CASE step OF
	0:	(* Wait for rising edge at bWrite variable *)
		IF bWrite THEN
			bWrite 	:= FALSE;
			bBusy 	:= TRUE;
			bError	:= FALSE;
			nErrId	:= 0;
			hFile	:= 0;
			nRow	:= 0;
			nColumn	:= 0;
			step 	:= 1;
		END_IF

	1:	(* Open source file *)
		fbFileOpen(  bExecute := FALSE  );
		fbFileOpen( sNetId := sNetId, sPathName := sFileName, nMode := FOPEN_MODEAPPEND OR FOPEN_MODETEXT,(* Open file in TEXT mode! *)
					ePath := PATH_GENERIC, bExecute := TRUE );
		step := 2;

	2:(* Wait until open not busy *)
		fbFileOpen( bExecute := FALSE, bError => bError, nErrID => nErrID, hFile => hFile );
		IF NOT fbFileOpen.bBusy THEN
			IF NOT fbFileOpen.bError THEN
				step := 3;
			ELSE(* Error: file not found? *)
				step := 100;
			END_IF
		END_IF

	3:(* Convert one PLC record to CSV format *)
		sCSVLine := '';
		fbWriter.eCmd := eEnumCmd_First;(* Write first field value *)
		IF nRow <= CONFIG.MAX_CSV_ROWS THEN
			FOR nColumn:= 1 TO MAX_FIELDS BY 1 DO
				CASE nColumn OF 
					1: sCSVField := CONCAT( PartsData.Status[VUT].PartNumber,',');  // Part Number
					2: sCSVField := CONCAT( PartsData.Status[VUT].LotNumber,',');  //  Lot Number
					3: sCSVField := CONCAT( LotsData.Lot.JobNumber,','); 
					4: sCSVField := CONCAT( LotsData.Lot.LotDate,',');
				//	5: sCSVField := CONCAT( LotsData.Lot.PistonLotNumber,','); 
				//	6: sCSVField := CONCAT( LotsData.Lot.PistonPartNumber,','); 
				//	7: sCSVField := CONCAT( LotsData.Lot.CapLotNumber,','); 
				//	8: sCSVField := CONCAT( LotsData.Lot.CapPartNumber,','); 
				//	9: sCSVField := CONCAT( LotsData.Lot.RawMaterialLotNumber,','); 
				//	10: sCSVField := CONCAT( LotsData.Lot.BlackConPartNumber,','); 
				//	11: sCSVField := CONCAT( LotsData.Lot.Comment,','); 					
					//5: sCSVField := CONCAT( PartsData.Status[VUT].LoadTime,',');  // Load Time  
				    5: sCSVField := CONCAT (PartsData.Status[VUT].VisionInspectTime, ','); //Vision Inspect Time
			//		5: sCSVField := CONCAT (PartsData.Status[VUT].PistonInsertTime, ','); //Piston Insert Time
			//		6: sCSVField := CONCAT (PartsData.Status[VUT].CapInsertTime, ','); //Cap Insert Time
			//		7: sCSVField := CONCAT (PartsData.Status[VUT].UnloadTime, ','); //Good Unload  Time
			//		8: sCSVField := CONCAT (PartsData.Status[VUT].RejectUnloadTime, ','); //Reject Unload Time
					6: sCSVField := CONCAT( INT_TO_STRING(PartsData.Status[VUT].CavityNumber),',');  // Cavity Number
					7: CASE  PartsData.Status[VUT].BarrelSize OF                                     // Barrel Type
						   	eBarrelType.Size55cc: sCSVField := CONCAT('55cc',',');
						   	eBarrelType.Size30cc: sCSVField := CONCAT('30cc',',');
	 						eBarrelType.Size10cc: sCSVField := CONCAT('10cc',',');
	 						eBarrelType.Size5cc:  sCSVField := CONCAT('5cc',',');
	 						eBarrelType.Size3cc:  sCSVField := CONCAT('3cc',',');
					   END_CASE
					8: IF (PartsData.Status[VUT].VisionPass) THEN sCSVField := CONCAT('OK',','); ELSE sCSVField := CONCAT('NG',','); END_IF  // Vision Pass or Fail/Disabled
					9: IF (PartsData.Status[VUT].PistonPass) THEN sCSVField := CONCAT('OK',','); ELSE sCSVField := CONCAT('NG',','); END_IF  // Piston Pass or Fail/Disabled
					10: IF (PartsData.Status[VUT].CapPass) THEN sCSVField := CONCAT('OK',','); ELSE sCSVField := CONCAT('NG',','); END_IF  // Piston Pass or Fail/Disabled
					11: IF (PartsData.Status[VUT].GoodUnload) THEN sCSVField := CONCAT('OK',','); ELSE sCSVField := CONCAT('NG',','); END_IF  // Piston Pass or Fail/Disabled
					12: sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].BurnOffTemp),',');  // Burn Off Temperature
					13: sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].VisionData.MaxIndividualStainArea),',');  // Piston Stroke
					//13: sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].PistonStroke),',');  // Piston Stroke
					//12: ;//sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].CapTorque),',');  // Cap Torque
					14: IF (PartsData.Status[VUT].Premium) THEN sCSVField := CONCAT('PREM',','); 
                        ELSIF (PartsData.Status[VUT].Good) THEN sCSVField := CONCAT('GOOD',',');
                        ELSE sCSVField := CONCAT('NG',','); END_IF  // Premium 
					15: IF (NOT PartsData.Status[VUT].VisionData.Cam1Judgement) THEN sCSVField := CONCAT('SSOK',','); ELSE sCSVField := CONCAT('SSNG',','); END_IF  // Short Shot
					16: IF (NOT PartsData.Status[VUT].VisionData.Cam2Judgement) THEN sCSVField := CONCAT('ST2OK ',','); ELSE sCSVField := CONCAT('ST2NG',','); END_IF  // Cam 2 
					17: IF (NOT PartsData.Status[VUT].VisionData.Cam3Judgement) THEN sCSVField := CONCAT('ST3Ok ',','); ELSE sCSVField := CONCAT('ST3NG',','); END_IF  // Cam 3
					18: IF (NOT PartsData.Status[VUT].VisionData.Cam4Judgement) THEN sCSVField := CONCAT('ST4OK',','); ELSE sCSVField := CONCAT('ST4NG',','); END_IF  // Cam 4					
					19:	TotalStainCount  := PartsData.Status[VUT].VisionData.UpperFlawCountCam2 + PartsData.Status[VUT].VisionData.LowerFlawCountCam2 +  					   
						PartsData.Status[VUT].VisionData.UpperFlawCountCam3 + PartsData.Status[VUT].VisionData.LowerFlawCountCam3 +    
						PartsData.Status[VUT].VisionData.UpperFlawCountCam4 + PartsData.Status[VUT].VisionData.LowerFlawCountCam4 ;
						IF (TotalStainCount = 1) THEN
							PartsData.Status[VUT].VisionData.MinIndividualStainArea := PartsData.Status[VUT].VisionData.ModifiedMaxStain;
						END_IF
						sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].VisionData.MinIndividualStainArea),',');  
					//Curvature correction math gets applied to Max individual stain but not Min individual stain.  If there is only 1 stain, 
					//Nordson would be confused because Min and Max would not match even though they are the same stain.  To avoid this, if
					//there is only 1 stain I copy the value of the Max stain into the Min stain field.  
						
					20: sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].VisionData.ModifiedMaxStain),',');  
					21: sCSVField := CONCAT( REAL_TO_STRING(PartsData.Status[VUT].VisionData.ModifiedStainArea),',');
					//21:
					//	TotalStainArea   := (PartsData.Status[VUT].VisionData.UpperFlawAreaCam2 + PartsData.Status[VUT].VisionData.LowerFlawAreaCam2 + 
					//	PartsData.Status[VUT].VisionData.UpperFlawAreaCam3 + PartsData.Status[VUT].VisionData.LowerFlawAreaCam3 + 
					//	PartsData.Status[VUT].VisionData.UpperFlawAreaCam4 + PartsData.Status[VUT].VisionData.LowerFlawAreaCam4)/1000 ;  
					//    sCSVField := CONCAT( REAL_TO_STRING(TotalStainArea),',');  // Total Stain Area
					22:
                        sCSVField := CONCAT( REAL_TO_STRING(TotalStainCount),',');  // Total Stain Count			
					ELSE;
				END_CASE			
			    (* Add new field to the record buffer *)
				fbWriter( 	pBuffer := ADR( sCSVLine ), cbBuffer := SIZEOF( sCSVLine ) - 1, putValue := sCSVField, pValue := 0, cbValue := 0,
							bCRLF := ( nColumn = MAX_FIELDS ) );(* bCRLF == TRUE => Write CRLF after the last field value *)
				IF fbWriter.bOk THEN
					fbWriter.eCmd := eEnumCmd_Next;(* Write next field value *)
				ELSE(* Error *)
					step := 100;
					RETURN;
				END_IF		
			END_FOR
					
			(* FB_FilePuts adds allready CR (carriage return) to the written line.
			We have to replace the $R$L characters with $L character to avoid double CR. *)
			IF RIGHT( sCSVLine, 2 ) = '$R$L' THEN
				sCSVLine := REPLACE( sCSVLine, '$L', 2, LEN( sCSVLine ) - 1 );
			END_IF

			nRow := nRow + 1;(* Increment number of created records (rows) *)
			step := 4;(* Write record to the file *)
			fbFilePuts( bExecute := FALSE );

		ELSE(* All rows written => Close file *)
			step := 10;
		END_IF

	4:	(* Write single text line *)
		fbFilePuts( bExecute := FALSE );
		fbFilePuts( sNetId := sNetId, hFile := hFile, sLine := sCSVLine, bExecute := TRUE );
		step := 5;

	5:(* Wait until write not busy *)
		fbFilePuts( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF NOT fbFilePuts.bBusy THEN
			IF NOT fbFilePuts.bError THEN
				step := 10;(* We don't have a next record *)
			ELSE(* Error *)
				step := 100;
			END_IF
		END_IF

	10:	(* Close source file *)
		fbFileClose( bExecute := FALSE );
		fbFileClose( sNetId := sNetId, hFile := hFile, bExecute := TRUE );
		step := 11;

	11:(* Wait until close not busy *)
		fbFileClose( bExecute := FALSE, bError => bError, nErrID => nErrID );
		IF ( NOT fbFileClose.bBusy ) THEN
			hFile := 0;
			step := 100;
		END_IF

	100: (* Error or ready step => cleanup *)
		IF ( hFile <> 0 ) THEN
			step := 10; (* Close the source file *)
		ELSE
			bBusy := FALSE;
			step := 0;	(* Ready *)
		END_IF

END_CASE



]]></ST>
    </Implementation>
    <Property Name="CurrWriteStep" Id="{ce090317-a2bd-480f-acc3-c60a708c6c03}">
      <Declaration><![CDATA[PROPERTY PUBLIC CurrWriteStep : DWORD]]></Declaration>
      <Get Name="Get" Id="{abe94ba6-3f9b-4271-8ca6-bbe1789d0c03}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrWriteStep := step;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="VehicleID" Id="{afe49aa2-53ef-4e9b-a737-4d4e87e886ea}">
      <Declaration><![CDATA[PROPERTY PUBLIC VehicleID : BYTE]]></Declaration>
      <Set Name="Set" Id="{f9a864cf-e459-42e0-a1f9-09a7fe12f084}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[VUT := VehicleID;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="WriteData" Id="{eb0f4678-bd38-482b-b18e-41e1e9e213c0}">
      <Declaration><![CDATA[PROPERTY PUBLIC WriteData : BOOL]]></Declaration>
      <Set Name="Set" Id="{6db0ac63-cc8c-4bf5-8164-61ce47af201b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bWrite := WriteData;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="P_TextModeWrite">
      <LineId Id="133" Count="0" />
      <LineId Id="3" Count="31" />
      <LineId Id="206" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="343" Count="1" />
      <LineId Id="346" Count="6" />
      <LineId Id="216" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="355" Count="3" />
      <LineId Id="354" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="243" Count="3" />
      <LineId Id="242" Count="0" />
      <LineId Id="219" Count="5" />
      <LineId Id="435" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="396" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="554" Count="0" />
      <LineId Id="560" Count="1" />
      <LineId Id="557" Count="0" />
      <LineId Id="562" Count="1" />
      <LineId Id="559" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="567" Count="1" />
      <LineId Id="565" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="235" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="260" Count="7" />
      <LineId Id="208" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="52" Count="7" />
      <LineId Id="473" Count="0" />
      <LineId Id="60" Count="44" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_TextModeWrite.CurrWriteStep.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_TextModeWrite.VehicleID.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="P_TextModeWrite.WriteData.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>